{"ast":null,"code":"import { all, fork, call, put, takeEvery, takeLatest, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nconst l = logIn({\n  type: 'LOG_IN_REQUEST',\n  data: {\n    id: 'defian@gmail.com'\n  }\n});\nl.next();\n\nfunction logInAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    // const result = yield call(logInAPI, action.data)\n    //fork 비동기 호출 yield는 await 역할인데, fork에서는 그렇지 않음 call에서만\n    //call 동기 호출\n    yield delay(1000);\n    yield put({\n      type: 'LOG_IN_SUCCESS',\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_IN_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n  try {\n    // const result = yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: 'LOG_OUT_SUCCESS',\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_OUT_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest('LOG_IN_REQUEST', logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest('LOG_OUT_REQUEST', logOut);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\n}","map":{"version":3,"sources":["C:/Git_defian/study/React/react-nodebird/prepare/front/sagas/user.js"],"names":["all","fork","call","put","takeEvery","takeLatest","delay","axios","l","logIn","type","data","id","next","logInAPI","post","action","result","err","response","logOutAPI","logOut","watchLogIn","watchLogOut","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,SAA/B,EAA0CC,UAA1C,EAAsDC,KAAtD,QAAmE,oBAAnE;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAGA,MAAMC,CAAC,GAAGC,KAAK,CAAC;AAAEC,EAAAA,IAAI,EAAE,gBAAR;AAA0BC,EAAAA,IAAI,EAAE;AAAEC,IAAAA,EAAE,EAAE;AAAN;AAAhC,CAAD,CAAf;AACAJ,CAAC,CAACK,IAAF;;AAGA,SAASC,QAAT,CAAkBH,IAAlB,EAAwB;AACpB,SAAOJ,KAAK,CAACQ,IAAN,CAAW,YAAX,EAAyBJ,IAAzB,CAAP;AACH;;AAED,UAAUF,KAAV,CAAgBO,MAAhB,EAAwB;AACpB,MAAI;AACA;AACA;AACA;AACA,UAAMV,KAAK,CAAC,IAAD,CAAX;AACA,UAAMH,GAAG,CAAC;AACNO,MAAAA,IAAI,EAAE,gBADA;AAENC,MAAAA,IAAI,EAAEM,MAAM,CAACN;AAFP,KAAD,CAAT;AAIH,GATD,CASE,OAAOO,GAAP,EAAY;AACV,UAAMf,GAAG,CAAC;AACNO,MAAAA,IAAI,EAAE,gBADA;AAENC,MAAAA,IAAI,EAAEO,GAAG,CAACC,QAAJ,CAAaR;AAFb,KAAD,CAAT;AAIH;AAEJ;;AAED,SAASS,SAAT,GAAqB;AACjB,SAAOb,KAAK,CAACQ,IAAN,CAAW,aAAX,CAAP;AACH;;AAED,UAAUM,MAAV,GAAmB;AACf,MAAI;AACA;AACA,UAAMf,KAAK,CAAC,IAAD,CAAX;AACA,UAAMH,GAAG,CAAC;AACNO,MAAAA,IAAI,EAAE,iBADA;AAENC,MAAAA,IAAI,EAAEM,MAAM,CAACN;AAFP,KAAD,CAAT;AAIH,GAPD,CAOE,OAAOO,GAAP,EAAY;AACV,UAAMf,GAAG,CAAC;AACNO,MAAAA,IAAI,EAAE,iBADA;AAENC,MAAAA,IAAI,EAAEO,GAAG,CAACC,QAAJ,CAAaR;AAFb,KAAD,CAAT;AAIH;AAEJ;;AAED,UAAUW,UAAV,GAAuB;AACnB,QAAMjB,UAAU,CAAC,gBAAD,EAAmBI,KAAnB,CAAhB;AACH;;AAED,UAAUc,WAAV,GAAwB;AACpB,QAAMlB,UAAU,CAAC,iBAAD,EAAoBgB,MAApB,CAAhB;AACH;;AAED,eAAe,UAAUG,QAAV,GAAqB;AAChC,QAAMxB,GAAG,CAAC,CACNC,IAAI,CAACqB,UAAD,CADE,EAENrB,IAAI,CAACsB,WAAD,CAFE,CAAD,CAAT;AAIH","sourcesContent":["import { all, fork, call, put, takeEvery, takeLatest, delay } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\n\r\n\r\nconst l = logIn({ type: 'LOG_IN_REQUEST', data: { id: 'defian@gmail.com' } })\r\nl.next();\r\n\r\n\r\nfunction logInAPI(data) {\r\n    return axios.post('/api/login', data);\r\n}\r\n\r\nfunction* logIn(action) {\r\n    try {\r\n        // const result = yield call(logInAPI, action.data)\r\n        //fork 비동기 호출 yield는 await 역할인데, fork에서는 그렇지 않음 call에서만\r\n        //call 동기 호출\r\n        yield delay(1000);\r\n        yield put({\r\n            type: 'LOG_IN_SUCCESS',\r\n            data: result.data\r\n        })\r\n    } catch (err) {\r\n        yield put({\r\n            type: 'LOG_IN_FAILURE',\r\n            data: err.response.data\r\n        })\r\n    }\r\n\r\n}\r\n\r\nfunction logOutAPI() {\r\n    return axios.post('/api/logout');\r\n}\r\n\r\nfunction* logOut() {\r\n    try {\r\n        // const result = yield call(logOutAPI);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: 'LOG_OUT_SUCCESS',\r\n            data: result.data\r\n        })\r\n    } catch (err) {\r\n        yield put({\r\n            type: 'LOG_OUT_FAILURE',\r\n            data: err.response.data\r\n        })\r\n    }\r\n\r\n}\r\n\r\nfunction* watchLogIn() {\r\n    yield takeLatest('LOG_IN_REQUEST', logIn);\r\n}\r\n\r\nfunction* watchLogOut() {\r\n    yield takeLatest('LOG_OUT_REQUEST', logOut);\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}