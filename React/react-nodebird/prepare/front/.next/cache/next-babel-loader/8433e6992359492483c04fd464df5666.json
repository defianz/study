{"ast":null,"code":"import { all, fork, call, put, takeEvery, takeLatest, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE } from '../reducers/user';\nconst l = logIn({\n  type: LOG_IN_REQUEST,\n  data: {\n    id: 'defian@gmail.com'\n  }\n});\nl.next();\n\nfunction logInAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    // const result = yield call(logInAPI, action.data)\n    //fork 비동기 호출 yield는 await 역할인데, fork에서는 그렇지 않음 call에서만\n    //call 동기 호출\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n  try {\n    // const result = yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction SignUpAPI() {\n  return axios.post('/api/SignUp');\n}\n\nfunction* SignUp() {\n  try {\n    // const result = yield call(SignUpAPI);\n    yield delay(1000);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, SignUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["C:/Git_defian/study/React/react-nodebird/prepare/front/sagas/user.js"],"names":["all","fork","call","put","takeEvery","takeLatest","delay","axios","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","l","logIn","type","data","id","next","logInAPI","post","action","err","response","logOutAPI","logOut","SignUpAPI","SignUp","watchLogIn","watchLogOut","watchSignUp","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,SAA/B,EAA0CC,UAA1C,EAAsDC,KAAtD,QAAmE,oBAAnE;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACIC,eADJ,EACqBC,eADrB,EACsCC,eADtC,EAEIC,cAFJ,EAEoBC,cAFpB,EAEoCC,cAFpC,EAGIC,eAHJ,EAGqBC,eAHrB,EAGsCC,eAHtC,QAIO,kBAJP;AAOA,MAAMC,CAAC,GAAGC,KAAK,CAAC;AAAEC,EAAAA,IAAI,EAAER,cAAR;AAAwBS,EAAAA,IAAI,EAAE;AAAEC,IAAAA,EAAE,EAAE;AAAN;AAA9B,CAAD,CAAf;AACAJ,CAAC,CAACK,IAAF;;AAGA,SAASC,QAAT,CAAkBH,IAAlB,EAAwB;AACpB,SAAOb,KAAK,CAACiB,IAAN,CAAW,YAAX,EAAyBJ,IAAzB,CAAP;AACH;;AAED,UAAUF,KAAV,CAAgBO,MAAhB,EAAwB;AACpB,MAAI;AACA;AACA;AACA;AACA,UAAMnB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMH,GAAG,CAAC;AACNgB,MAAAA,IAAI,EAAEP,cADA;AAENQ,MAAAA,IAAI,EAAEK,MAAM,CAACL;AAFP,KAAD,CAAT;AAIH,GATD,CASE,OAAOM,GAAP,EAAY;AACV,UAAMvB,GAAG,CAAC;AACNgB,MAAAA,IAAI,EAAEN,cADA;AAENO,MAAAA,IAAI,EAAEM,GAAG,CAACC,QAAJ,CAAaP;AAFb,KAAD,CAAT;AAIH;AAEJ;;AAED,SAASQ,SAAT,GAAqB;AACjB,SAAOrB,KAAK,CAACiB,IAAN,CAAW,aAAX,CAAP;AACH;;AAED,UAAUK,MAAV,GAAmB;AACf,MAAI;AACA;AACA,UAAMvB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMH,GAAG,CAAC;AACNgB,MAAAA,IAAI,EAAEJ;AADA,KAAD,CAAT;AAGH,GAND,CAME,OAAOW,GAAP,EAAY;AACV,UAAMvB,GAAG,CAAC;AACNgB,MAAAA,IAAI,EAAEH,eADA;AAENI,MAAAA,IAAI,EAAEM,GAAG,CAACC,QAAJ,CAAaP;AAFb,KAAD,CAAT;AAIH;AAEJ;;AAED,SAASU,SAAT,GAAqB;AACjB,SAAOvB,KAAK,CAACiB,IAAN,CAAW,aAAX,CAAP;AACH;;AAED,UAAUO,MAAV,GAAmB;AACf,MAAI;AACA;AACA,UAAMzB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMH,GAAG,CAAC;AACNgB,MAAAA,IAAI,EAAEV;AADA,KAAD,CAAT;AAGH,GAND,CAME,OAAOiB,GAAP,EAAY;AACV,UAAMvB,GAAG,CAAC;AACNgB,MAAAA,IAAI,EAAET,eADA;AAENU,MAAAA,IAAI,EAAEM,GAAG,CAACC,QAAJ,CAAaP;AAFb,KAAD,CAAT;AAIH;AAEJ;;AAED,UAAUY,UAAV,GAAuB;AACnB,QAAM3B,UAAU,CAACM,cAAD,EAAiBO,KAAjB,CAAhB;AACH;;AAED,UAAUe,WAAV,GAAwB;AACpB,QAAM5B,UAAU,CAACS,eAAD,EAAkBe,MAAlB,CAAhB;AACH;;AAED,UAAUK,WAAV,GAAwB;AACpB,QAAM7B,UAAU,CAACG,eAAD,EAAkBuB,MAAlB,CAAhB;AACH;;AAED,eAAe,UAAUI,QAAV,GAAqB;AAChC,QAAMnC,GAAG,CAAC,CACNC,IAAI,CAAC+B,UAAD,CADE,EAEN/B,IAAI,CAACgC,WAAD,CAFE,EAGNhC,IAAI,CAACiC,WAAD,CAHE,CAAD,CAAT;AAKH","sourcesContent":["import { all, fork, call, put, takeEvery, takeLatest, delay } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n    SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE,\r\n    LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE,\r\n    LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE\r\n} from '../reducers/user';\r\n\r\n\r\nconst l = logIn({ type: LOG_IN_REQUEST, data: { id: 'defian@gmail.com' } })\r\nl.next();\r\n\r\n\r\nfunction logInAPI(data) {\r\n    return axios.post('/api/login', data);\r\n}\r\n\r\nfunction* logIn(action) {\r\n    try {\r\n        // const result = yield call(logInAPI, action.data)\r\n        //fork 비동기 호출 yield는 await 역할인데, fork에서는 그렇지 않음 call에서만\r\n        //call 동기 호출\r\n        yield delay(1000);\r\n        yield put({\r\n            type: LOG_IN_SUCCESS,\r\n            data: action.data\r\n        })\r\n    } catch (err) {\r\n        yield put({\r\n            type: LOG_IN_FAILURE,\r\n            data: err.response.data\r\n        })\r\n    }\r\n\r\n}\r\n\r\nfunction logOutAPI() {\r\n    return axios.post('/api/logout');\r\n}\r\n\r\nfunction* logOut() {\r\n    try {\r\n        // const result = yield call(logOutAPI);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: LOG_OUT_SUCCESS,\r\n        })\r\n    } catch (err) {\r\n        yield put({\r\n            type: LOG_OUT_FAILURE,\r\n            data: err.response.data\r\n        })\r\n    }\r\n\r\n}\r\n\r\nfunction SignUpAPI() {\r\n    return axios.post('/api/SignUp');\r\n}\r\n\r\nfunction* SignUp() {\r\n    try {\r\n        // const result = yield call(SignUpAPI);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: SIGN_UP_SUCCESS,\r\n        })\r\n    } catch (err) {\r\n        yield put({\r\n            type: SIGN_UP_FAILURE,\r\n            data: err.response.data\r\n        })\r\n    }\r\n\r\n}\r\n\r\nfunction* watchLogIn() {\r\n    yield takeLatest(LOG_IN_REQUEST, logIn);\r\n}\r\n\r\nfunction* watchLogOut() {\r\n    yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\nfunction* watchSignUp() {\r\n    yield takeLatest(SIGN_UP_REQUEST, SignUp);\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n        fork(watchSignUp),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}